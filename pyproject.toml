[tool.black]
line-length = 120

[tool.isort]
profile = "black"

[tool.poetry]
name = "temply"
version = "0.7.0-dev"
description = "Render jinja2 templates on the command line with shell environment variables."
authors = ["Adrien Mannocci <adrien.mannocci@gmail.com>"]
license = "MIT"
readme = "README.md"
repository = "https://github.com/amannocci/temply"
documentation = "https://github.com/amannocci/temply"
classifiers = [
    "Intended Audience :: Developers",
    "Programming Language :: Python :: 3.9"
]
packages = [
    { include = "temply" }
]

[tool.poetry.scripts]
temply = "temply.temply:main"

[tool.poetry.urls]
"Changelog" = "https://github.com/amannocci/temply/CHANGELOG.md"
"Tracker" = "https://github.com/amannocci/temply/issues"

[tool.poetry.dependencies]
python = "~3.9"
click = "~8.1.3" # BSD
jinja2 = "~3.1.2" # BSD
pyinstaller = { version = "^5.12.0", optional = true } # GPL 2.0
PyYAML = "^6.0" # MIT

[tool.poetry.dev-dependencies]
black = "^23.3.0" # MIT
poethepoet = "^0.20.0" # MIT
poetry-plugin-up = "^0.3.0" # MIT
pylint = "^2.17.4" # GPL 2.0
pytest = "^7.3.2" # MIT
sh = "1.14.3" # MIT

[tool.poetry.extras]
build = ["pyinstaller"]

[tool.poe.tasks."env:configure"]
script = "scripts.env:configure"

[tool.poe.tasks."project:upgrade"]
cmd = "poetry up --latest"

[tool.poe.tasks._cleanup]
shell = """
import shutil

for path in ["build", "dist"]:
    try:
        shutil.rmtree(path)
    except FileNotFoundError as err:
        print(f"Skipping {path} deletion...")
"""
interpreter = "python"

[tool.poe.tasks.generate]
sequence = [
    { ref = "env:configure" },
    { cmd = "poetry run pyinstaller -n temply --onefile --noconfirm ./bin/temply" }
]

[tool.poe.tasks.lint]
sequence = [
    { ref = "env:configure" },
    { cmd = "poetry run pylint temply" }
]

[tool.poe.tasks.fmt]
sequence = [
    { ref = "env:configure" },
    { cmd = "poetry run isort temply tests scripts" },
    { cmd = "poetry run black temply tests scripts" }
]

[tool.poe.tasks.build]
sequence = [
    { ref = "_cleanup" },
    { cmd = "poetry run pyinstaller temply.spec" }
]

[tool.poe.tasks.test]
sequence = [
    { ref = "env:configure" },
    { cmd = "poetry run pytest" }
]

[tool.poe.tasks.release]
sequence = [
    { ref = "env:configure" },
    { script = "scripts.release:run" }
]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
