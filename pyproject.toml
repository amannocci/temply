[tool.black]
line-length = 120

[tool.isort]
profile = "black"

[tool.poetry]
name = "temply"
version = "0.7.0-dev"
description = "Render jinja2 templates on the command line with shell environment variables."
authors = ["Adrien Mannocci <adrien.mannocci@gmail.com>"]
license = "MIT"
readme = "README.md"
repository = "https://github.com/amannocci/temply"
documentation = "https://github.com/amannocci/temply"
classifiers = [
    "Intended Audience :: Developers",
    "Programming Language :: Python :: 3.11"
]
packages = [
    { include = "temply" }
]

[tool.poetry.scripts]
temply = "temply.temply:main"

[tool.poetry.urls]
"Changelog" = "https://github.com/amannocci/temply/CHANGELOG.md"
"Tracker" = "https://github.com/amannocci/temply/issues"

[tool.poetry.dependencies]
python = ">=3.11,<3.13"
click = "~8.1.7" # BSD
jinja2 = "~3.1.2" # BSD
PyYAML = "^6.0.1" # MIT

[tool.poetry.dev-dependencies]
black = "^23.10.0" # MIT
poethepoet = "^0.24.1" # MIT
poetry-plugin-up = "^0.7.0" # MIT
pyinstaller = "^6.1.0" # GPL 2.0
pylint = "^3.0.1" # GPL 2.0
pytest = "^7.4.2" # MIT
sh = "^2.0.6" # MIT

[tool.poe.tasks."env:configure"]
help = "Setup environment."
script = "scripts.env:configure"

[tool.poe.tasks."project:upgrade"]
deps = [
    "env:configure"
]
help = "Upgrade project dependencies."
cmd = "poetry up --latest"

[tool.poe.tasks.wipe]
shell = """
import shutil

for path in ["build", "dist"]:
    try:
        shutil.rmtree(path)
    except FileNotFoundError as err:
        print(f"Skipping {path} deletion...")
"""
interpreter = "python"

[tool.poe.tasks.generate]
deps = [
    "env:configure"
]
help = "Generate configuration files."
cmd = "pyinstaller -n temply --onefile --noconfirm ./bin/temply"

[tool.poe.tasks.lint]
deps = [
    "env:configure"
]
help = "Lint code project."
cmd = "pylint temply"

[tool.poe.tasks.fmt]
deps = [
    "env:configure"
]
help = "Format code project."
sequence = [
    { cmd = "isort temply tests scripts" },
    { cmd = "black temply tests scripts" }
]

[tool.poe.tasks.build]
deps = [
    "wipe",
    "env:configure"
]
help = "Build standalone binary."
cmd = "pyinstaller temply.spec"

[tool.poe.tasks.test]
deps = [
    "env:configure"
]
help = "Run all tests."
cmd = "pytest tests"

[tool.poe.tasks.release]
deps = [
    "env:configure"
]
help = "Create a new temply release."
script = "scripts.release:run"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
